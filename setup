#!/bin/bash
##
# FreeIPA Backup: basic backup script for FreeIPA
# Copyright 2020 Tim Kennell Jr.
# Licensed under the MIT License (http://opensource.org/licenses/MIT)
##

# ---------------- #
# Global Constants #
# ---------------- #
SCRIPT_FILE="ipa-backup.sh"
DEFAULT_CONFIGURATION_FILE="ipa-backup.conf.default"
CONFIGURATION_FILE="ipa-backup.conf"


# -------------- #
# User Responses #
# -------------- #

# Detects "y", "n", "yes", and "no" user response in a case-insensitive manner
# param String $1
## Ex: yes_response "y" --> returns 0
## Ex: yes_response "yes" --> returns 0
## Ex: yes_response "n" --> returns 0
## Ex: yes_response "no" --> returns 0
## Ex: yes_response "" --> returns 1
## Ex: yes_response "gobble de guk" --> returns 1
yes_no_response() {
        if [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = y ]] \
                || [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = yes ]] \
                || [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = n ]] \
                || [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = no ]] ; then

                return 0
        else
                return 1
        fi
}

# Detect "y" or "yes" response as affirmative answer in case-insensitive manner
# param String $1
## Ex: yes_response "yes" --> returns 0
## Ex: yes_response "no" --> returns 1
## Ex: yes_response "gobble de guk" --> returns 1
yes_response() {
        if [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = y ]] \
                || [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = yes ]] ; then

                return 0
        else
                return 1
        fi
}

# Detect "n" or "no" response as affirmative answer in case-insensitive manner
# param String $1
## Ex: no_response "no" --> returns 0
## Ex: no_response "yes" --> returns 1
## Ex: no_response "gobble de guk" --> returns 1
no_response() {
        if [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = n ]] \
                || [[ $(echo "$1" | tr -s '[:upper:]' '[:lower:]') = no ]] ; then

                return 0
        else
                return 1
        fi
}


# ------------- #
# Initial Setup #
# ------------- #

cp "$DEFAULT_CONFIGURATION_FILE" "$CONFIGURATION_FILE"

# Current location to know where to run script
# Writes to terminator script for cron job
install_location=$(pwd)
sed -i -r 's|(INSTALL_LOCATION=).*|\1'"$install_location"'|g' "$SCRIPT_FILE"

echo

# --------------------- #
# Schedule and cron job #
# --------------------- #

# Request time to run system maintenance at until user gives valid response
# Set initial value of variable to "nonsense" so that while loop runs
cron_date=nonsense
while ! date -d "$cron_date" &> /dev/null ; do
        read -p "Time to run system maintenance [12:00 AM]: " cron_date

        if ! date -d "$cron_date" &> /dev/null ; then
                echo -en "\nI'm sorry, I didn't understand your response."
                echo -e "\nPlease enter a time in the format HH:MM (AM/PM)"
        fi
done

# Retrieve minutes and hours from user response for cron job
cron_min=$(date -d "$cron_date" +"%M")
cron_hour=$(date -d "$cron_date" +"%H")

# Initial comment as header for cron job file
cron_file_contents="# ipa-backup system maintenance script cron job\n"
cron_file_contents+="# Runs every day at user specificied time\n"
cron_file_contents+="# Backs up ipa settings by turning off all ipa services\n"

cron_file_contents+="# Exports backups to on-site locations at "
cron_file_contents+="user request\n\n"

# Set PATH variable for external programs
cron_file_contents+="# Set PATH variable for external programs\n"
cron_file_contents+="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:"
cron_file_contents+="/sbin:/bin\n\n"

# Cron job parameters
cron_file_contents+="# Run ipa-backup system at user specified "
cron_file_contents+="time\n"

cron_file_contents+="$cron_min $cron_hour * * * root "
cron_file_contents+="$install_location/ipa-backup\n"

# Place file into cron location
sudo echo -e "$cron_file_contents" > /etc/cron.d/ipa-backup

echo

# ---------------- #
# SSH key creation #
# ---------------- #

# Create specified directory for SSH keys and move keys to folder for 
#     organization (create dir if not exists)
# param Dir $1
# param File $2
## Ex: mv_key my.key --> mv my.key ssh_keys; mv my.key.pub ssh_keys
mv_key() {
        # create folder to contain key
        if ! [[ -d ssh_keys ]] ; then
                mkdir "$1"
        fi

        # move private and public key to folder
        mv "$2" "$1"
        mv "$2.pub" "$1"
}

# Create a 4096 bit ssh key with no passphrase using provided name ($1) and
#     store in ssh_keys folder for organization
# param String $1
## Ex: create_key "on_site_host" --> ssh_keys/terminator.on_site_host.key,
##     ssh_keys/terminator.on_site_host.key.pub
create_key() {
        # Reset user response on each function call
        local create_key_response

        # Read user input for creating on-site key until user gives valid response
        while ! yes_no_response "$create_key_response" ; do

                read -p "Create an $1 ssh key (y/n): " create_key_response

                if ! yes_no_response "$create_key_response" ; then
                        echo -en "\nI'm sorry, I didn't understand your response.  "
                        echo -e "Please type \"y\" or \"n\""
                fi
        done

        # Create on-site key if "y" or "yes"
        if yes_response "$create_key_response" ; then
                key_name="$HOSTNAME.ipa-backup.$1.key"
                key_dir="ssh_keys"
                echo "$key_dir$key_name"

                # create key
                ssh-keygen -b 4096 -N '' -f "$key_name" -C "$key_name"

                # Move key to folder for organization
                mv_key "$key_dir" "$key_name"

                # set variable in configuration file with key file
                sed -i -r 's|('"$1"'=).*|\1'"$install_location/$key_dir/$key_name"'|g' \
                        "$CONFIGURATION_FILE"
        fi
}

# see terminator.conf for key names
create_key "on_site_host_ssh_key"
